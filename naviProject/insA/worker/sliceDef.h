// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `sliceDef.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __sliceDef_h__
#define __sliceDef_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Demo
{

class manager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::manager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::manager*);

class insA;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::insA>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::insA*);

class insB;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Demo::insB>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Demo::insB*);

}

}

namespace Demo
{

class manager;
bool operator==(const manager&, const manager&);
bool operator<(const manager&, const manager&);
::Ice::Object* upCast(::Demo::manager*);
typedef ::IceInternal::Handle< ::Demo::manager> managerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::manager> managerPrx;
void __patch(managerPtr&, const ::Ice::ObjectPtr&);

class insA;
bool operator==(const insA&, const insA&);
bool operator<(const insA&, const insA&);
::Ice::Object* upCast(::Demo::insA*);
typedef ::IceInternal::Handle< ::Demo::insA> insAPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::insA> insAPrx;
void __patch(insAPtr&, const ::Ice::ObjectPtr&);

class insB;
bool operator==(const insB&, const insB&);
bool operator<(const insB&, const insB&);
::Ice::Object* upCast(::Demo::insB*);
typedef ::IceInternal::Handle< ::Demo::insB> insBPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Demo::insB> insBPrx;
void __patch(insBPtr&, const ::Ice::ObjectPtr&);

}

namespace Demo
{

struct position
{
    ::Ice::Double px;
    ::Ice::Double py;
    ::Ice::Double pz;
};

typedef ::std::vector< ::Demo::position> seqPoint;

typedef ::std::vector< ::Ice::Int> seqInteger;

typedef ::std::vector< ::std::string> seqString;

struct event
{
    ::std::string name;
    ::Ice::Double time;
    ::Demo::seqString seqStr;
    ::Demo::seqInteger seqInt;
    ::Demo::seqPoint seqPt;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Demo::position>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Demo::position, S>
{
    static void write(S* __os, const ::Demo::position& v)
    {
        __os->write(v.px);
        __os->write(v.py);
        __os->write(v.pz);
    }
};

template<class S>
struct StreamReader< ::Demo::position, S>
{
    static void read(S* __is, ::Demo::position& v)
    {
        __is->read(v.px);
        __is->read(v.py);
        __is->read(v.pz);
    }
};

template<>
struct StreamableTraits< ::Demo::event>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Demo::event, S>
{
    static void write(S* __os, const ::Demo::event& v)
    {
        __os->write(v.name);
        __os->write(v.time);
        __os->write(v.seqStr);
        __os->write(v.seqInt);
        __os->write(v.seqPt);
    }
};

template<class S>
struct StreamReader< ::Demo::event, S>
{
    static void read(S* __is, ::Demo::event& v)
    {
        __is->read(v.name);
        __is->read(v.time);
        __is->read(v.seqStr);
        __is->read(v.seqInt);
        __is->read(v.seqPt);
    }
};

}

namespace Demo
{

class Callback_manager_initialList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_manager_initialList_Base> Callback_manager_initialListPtr;

class Callback_manager_checkList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_manager_checkList_Base> Callback_manager_checkListPtr;

class Callback_manager_confirmTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_manager_confirmTime_Base> Callback_manager_confirmTimePtr;

class Callback_manager_HANDLEevent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_manager_HANDLEevent_Base> Callback_manager_HANDLEeventPtr;

class Callback_manager_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_manager_shutdown_Base> Callback_manager_shutdownPtr;

class Callback_insA_initWorker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insA_initWorker_Base> Callback_insA_initWorkerPtr;

class Callback_insA_HANDLEevOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insA_HANDLEevOrder_Base> Callback_insA_HANDLEevOrderPtr;

class Callback_insA_HANDLEevent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insA_HANDLEevent_Base> Callback_insA_HANDLEeventPtr;

class Callback_insA_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insA_shutdown_Base> Callback_insA_shutdownPtr;

class Callback_insB_initWorker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insB_initWorker_Base> Callback_insB_initWorkerPtr;

class Callback_insB_HANDLEevOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insB_HANDLEevOrder_Base> Callback_insB_HANDLEevOrderPtr;

class Callback_insB_HANDLEevent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insB_HANDLEevent_Base> Callback_insB_HANDLEeventPtr;

class Callback_insB_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_insB_shutdown_Base> Callback_insB_shutdownPtr;

}

namespace IceProxy
{

namespace Demo
{

class manager : virtual public ::IceProxy::Ice::Object
{
public:

    void initialList()
    {
        initialList(0);
    }
    void initialList(const ::Ice::Context& __ctx)
    {
        initialList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initialList(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initialList(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initialList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initialList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initialList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initialList(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initialList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initialList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initialList()
    {
        return begin_initialList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initialList(const ::Ice::Context& __ctx)
    {
        return begin_initialList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initialList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initialList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initialList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initialList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initialList(const ::Demo::Callback_manager_initialListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initialList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initialList(const ::Ice::Context& __ctx, const ::Demo::Callback_manager_initialListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initialList(&__ctx, __del, __cookie);
    }

    void end_initialList(const ::Ice::AsyncResultPtr&);
    
private:

    void initialList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initialList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool checkList()
    {
        return checkList(0);
    }
    bool checkList(const ::Ice::Context& __ctx)
    {
        return checkList(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkList(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkList(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkList(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkList(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkList(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkList(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkList(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Demo::managerPrx __proxy = ::Demo::managerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkList(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkList()
    {
        return begin_checkList(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkList(const ::Ice::Context& __ctx)
    {
        return begin_checkList(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkList(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkList(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkList(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkList(const ::Demo::Callback_manager_checkListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkList(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkList(const ::Ice::Context& __ctx, const ::Demo::Callback_manager_checkListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkList(&__ctx, __del, __cookie);
    }

    bool end_checkList(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkList(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkList(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void confirmTime(const ::std::string& modelName)
    {
        confirmTime(modelName, 0);
    }
    void confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx)
    {
        confirmTime(modelName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_confirmTime(const ::std::string& modelName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_confirmTime(modelName, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_confirmTime(const ::std::string& modelName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_confirmTime(modelName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_confirmTime(modelName, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_confirmTime(modelName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName)
    {
        return begin_confirmTime(modelName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx)
    {
        return begin_confirmTime(modelName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirmTime(modelName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirmTime(modelName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName, const ::Demo::Callback_manager_confirmTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirmTime(modelName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string& modelName, const ::Ice::Context& __ctx, const ::Demo::Callback_manager_confirmTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirmTime(modelName, &__ctx, __del, __cookie);
    }

    void end_confirmTime(const ::Ice::AsyncResultPtr&);
    
private:

    void confirmTime(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_confirmTime(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HANDLEevent(const ::Demo::event& ev)
    {
        HANDLEevent(ev, 0);
    }
    void HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        HANDLEevent(ev, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev)
    {
        return begin_HANDLEevent(ev, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        return begin_HANDLEevent(ev, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Demo::Callback_manager_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Demo::Callback_manager_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    void end_HANDLEevent(const ::Ice::AsyncResultPtr&);
    
private:

    void HANDLEevent(const ::Demo::event&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_manager_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_manager_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<manager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_secure(bool __secure) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_twoway() const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_oneway() const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_batchOneway() const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_datagram() const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_batchDatagram() const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_compress(bool __compress) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<manager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<manager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class insA : virtual public ::IceProxy::Ice::Object
{
public:

    void initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step)
    {
        initWorker(proxy, startTime, step, 0);
    }
    void initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx)
    {
        initWorker(proxy, startTime, step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initWorker(proxy, startTime, step, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initWorker(proxy, startTime, step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step)
    {
        return begin_initWorker(proxy, startTime, step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Demo::Callback_insA_initWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::Demo::Callback_insA_initWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, __del, __cookie);
    }

    void end_initWorker(const ::Ice::AsyncResultPtr&);
    
private:

    void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HANDLEevOrder(::Ice::Double currentTime)
    {
        HANDLEevOrder(currentTime, 0);
    }
    void HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx)
    {
        HANDLEevOrder(currentTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevOrder(currentTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevOrder(currentTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime)
    {
        return begin_HANDLEevOrder(currentTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Demo::Callback_insA_HANDLEevOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::Demo::Callback_insA_HANDLEevOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, __del, __cookie);
    }

    void end_HANDLEevOrder(const ::Ice::AsyncResultPtr&);
    
private:

    void HANDLEevOrder(::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HANDLEevent(const ::Demo::event& ev)
    {
        HANDLEevent(ev, 0);
    }
    void HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        HANDLEevent(ev, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev)
    {
        return begin_HANDLEevent(ev, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        return begin_HANDLEevent(ev, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Demo::Callback_insA_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Demo::Callback_insA_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    void end_HANDLEevent(const ::Ice::AsyncResultPtr&);
    
private:

    void HANDLEevent(const ::Demo::event&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_insA_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_insA_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<insA> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_secure(bool __secure) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_twoway() const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_oneway() const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_batchOneway() const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_datagram() const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_batchDatagram() const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_compress(bool __compress) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_timeout(int __timeout) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<insA> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<insA*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class insB : virtual public ::IceProxy::Ice::Object
{
public:

    void initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step)
    {
        initWorker(proxy, startTime, step, 0);
    }
    void initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx)
    {
        initWorker(proxy, startTime, step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initWorker(proxy, startTime, step, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initWorker(proxy, startTime, step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step)
    {
        return begin_initWorker(proxy, startTime, step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Demo::Callback_insB_initWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx& proxy, ::Ice::Double startTime, ::Ice::Double step, const ::Ice::Context& __ctx, const ::Demo::Callback_insB_initWorkerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_initWorker(proxy, startTime, step, &__ctx, __del, __cookie);
    }

    void end_initWorker(const ::Ice::AsyncResultPtr&);
    
private:

    void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HANDLEevOrder(::Ice::Double currentTime)
    {
        HANDLEevOrder(currentTime, 0);
    }
    void HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx)
    {
        HANDLEevOrder(currentTime, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevOrder(currentTime, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevOrder(currentTime, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime)
    {
        return begin_HANDLEevOrder(currentTime, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Demo::Callback_insB_HANDLEevOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double currentTime, const ::Ice::Context& __ctx, const ::Demo::Callback_insB_HANDLEevOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevOrder(currentTime, &__ctx, __del, __cookie);
    }

    void end_HANDLEevOrder(const ::Ice::AsyncResultPtr&);
    
private:

    void HANDLEevOrder(::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HANDLEevOrder(::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HANDLEevent(const ::Demo::event& ev)
    {
        HANDLEevent(ev, 0);
    }
    void HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        HANDLEevent(ev, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_HANDLEevent(ev, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_HANDLEevent(ev, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev)
    {
        return begin_HANDLEevent(ev, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx)
    {
        return begin_HANDLEevent(ev, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Demo::Callback_insB_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event& ev, const ::Ice::Context& __ctx, const ::Demo::Callback_insB_HANDLEeventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HANDLEevent(ev, &__ctx, __del, __cookie);
    }

    void end_HANDLEevent(const ::Ice::AsyncResultPtr&);
    
private:

    void HANDLEevent(const ::Demo::event&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HANDLEevent(const ::Demo::event&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Demo::Callback_insB_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Demo::Callback_insB_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<insB> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_secure(bool __secure) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_twoway() const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_oneway() const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_batchOneway() const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_datagram() const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_batchDatagram() const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_compress(bool __compress) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_timeout(int __timeout) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<insB> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<insB*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Demo
{

class manager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void initialList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool checkList(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void confirmTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class insA : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class insB : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Demo
{

class manager : virtual public ::IceDelegate::Demo::manager,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void initialList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void confirmTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class insA : virtual public ::IceDelegate::Demo::insA,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class insB : virtual public ::IceDelegate::Demo::insB,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Demo
{

class manager : virtual public ::IceDelegate::Demo::manager,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void initialList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkList(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void confirmTime(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class insA : virtual public ::IceDelegate::Demo::insA,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class insB : virtual public ::IceDelegate::Demo::insB,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Demo
{

class manager : virtual public ::Ice::Object
{
public:

    typedef managerPrx ProxyType;
    typedef managerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void initialList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initialList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool checkList(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void confirmTime(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___confirmTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HANDLEevent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const manager& l, const manager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const manager& l, const manager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class insA : virtual public ::Ice::Object
{
public:

    typedef insAPrx ProxyType;
    typedef insAPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initWorker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HANDLEevOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HANDLEevent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const insA& l, const insA& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const insA& l, const insA& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class insB : virtual public ::Ice::Object
{
public:

    typedef insBPrx ProxyType;
    typedef insBPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void initWorker(const ::Demo::managerPrx&, ::Ice::Double, ::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___initWorker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HANDLEevOrder(::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HANDLEevOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HANDLEevent(const ::Demo::event&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HANDLEevent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const insB& l, const insB& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const insB& l, const insB& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Demo
{

template<class T>
class CallbackNC_manager_initialList : public Callback_manager_initialList_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_manager_initialList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_manager_initialListPtr
newCallback_manager_initialList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_initialList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_initialListPtr
newCallback_manager_initialList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_initialList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_manager_initialListPtr
newCallback_manager_initialList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_initialList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_initialListPtr
newCallback_manager_initialList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_initialList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_manager_initialList : public Callback_manager_initialList_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_manager_initialList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_manager_initialListPtr
newCallback_manager_initialList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_initialList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_initialListPtr
newCallback_manager_initialList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_initialList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_manager_initialListPtr
newCallback_manager_initialList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_initialList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_initialListPtr
newCallback_manager_initialList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_initialList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_manager_checkList : public Callback_manager_checkList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_manager_checkList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::managerPrx __proxy = ::Demo::managerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_manager_checkListPtr
newCallback_manager_checkList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_checkList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_checkListPtr
newCallback_manager_checkList(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_checkList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_manager_checkList : public Callback_manager_checkList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_manager_checkList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Demo::managerPrx __proxy = ::Demo::managerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_manager_checkListPtr
newCallback_manager_checkList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_checkList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_checkListPtr
newCallback_manager_checkList(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_checkList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_manager_confirmTime : public Callback_manager_confirmTime_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_manager_confirmTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_confirmTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_confirmTime<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_confirmTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_confirmTime<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_manager_confirmTime : public Callback_manager_confirmTime_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_manager_confirmTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_confirmTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_confirmTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_confirmTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_confirmTimePtr
newCallback_manager_confirmTime(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_confirmTime<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_manager_HANDLEevent : public Callback_manager_HANDLEevent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_manager_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_manager_HANDLEevent : public Callback_manager_HANDLEevent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_manager_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_HANDLEeventPtr
newCallback_manager_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_manager_shutdown : public Callback_manager_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_manager_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_manager_shutdownPtr
newCallback_manager_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_shutdownPtr
newCallback_manager_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_manager_shutdownPtr
newCallback_manager_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_manager_shutdownPtr
newCallback_manager_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_manager_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_manager_shutdown : public Callback_manager_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_manager_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_manager_shutdownPtr
newCallback_manager_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_shutdownPtr
newCallback_manager_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_manager_shutdownPtr
newCallback_manager_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_manager_shutdownPtr
newCallback_manager_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_manager_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insA_initWorker : public Callback_insA_initWorker_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insA_initWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_initWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_initWorker<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_initWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_initWorker<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insA_initWorker : public Callback_insA_initWorker_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insA_initWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_initWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_initWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_initWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_initWorkerPtr
newCallback_insA_initWorker(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_initWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insA_HANDLEevOrder : public Callback_insA_HANDLEevOrder_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insA_HANDLEevOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insA_HANDLEevOrder : public Callback_insA_HANDLEevOrder_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insA_HANDLEevOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEevOrderPtr
newCallback_insA_HANDLEevOrder(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insA_HANDLEevent : public Callback_insA_HANDLEevent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insA_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insA_HANDLEevent : public Callback_insA_HANDLEevent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insA_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_HANDLEeventPtr
newCallback_insA_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insA_shutdown : public Callback_insA_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insA_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insA_shutdownPtr
newCallback_insA_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_shutdownPtr
newCallback_insA_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insA_shutdownPtr
newCallback_insA_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insA_shutdownPtr
newCallback_insA_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insA_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insA_shutdown : public Callback_insA_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insA_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insA_shutdownPtr
newCallback_insA_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_shutdownPtr
newCallback_insA_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insA_shutdownPtr
newCallback_insA_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insA_shutdownPtr
newCallback_insA_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insA_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insB_initWorker : public Callback_insB_initWorker_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insB_initWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_initWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_initWorker<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_initWorker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_initWorker<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insB_initWorker : public Callback_insB_initWorker_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insB_initWorker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_initWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_initWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_initWorker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_initWorkerPtr
newCallback_insB_initWorker(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_initWorker<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insB_HANDLEevOrder : public Callback_insB_HANDLEevOrder_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insB_HANDLEevOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insB_HANDLEevOrder : public Callback_insB_HANDLEevOrder_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insB_HANDLEevOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEevOrderPtr
newCallback_insB_HANDLEevOrder(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insB_HANDLEevent : public Callback_insB_HANDLEevent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insB_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_HANDLEevent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insB_HANDLEevent : public Callback_insB_HANDLEevent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insB_HANDLEevent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_HANDLEeventPtr
newCallback_insB_HANDLEevent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_HANDLEevent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_insB_shutdown : public Callback_insB_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_insB_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_insB_shutdownPtr
newCallback_insB_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_shutdownPtr
newCallback_insB_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_insB_shutdownPtr
newCallback_insB_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_insB_shutdownPtr
newCallback_insB_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_insB_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_insB_shutdown : public Callback_insB_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_insB_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_insB_shutdownPtr
newCallback_insB_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_shutdownPtr
newCallback_insB_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_insB_shutdownPtr
newCallback_insB_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_insB_shutdownPtr
newCallback_insB_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_insB_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
